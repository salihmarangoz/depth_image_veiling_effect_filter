#!/usr/bin/env python
PACKAGE = "depth_image_veiling_effect_filter"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#_______________________________________________________________________________________________
# Global parameters
#_______________________________________________________________________________________________
normal_f_enum = gen.enum([  gen.const("DisabledNormalBasedFiltering",                      int_t, 0, "Disabled"),
                            gen.const("rip_ImpactAngleImageBasedOnLocalNormals",           int_t, 1, "Using pcl::RangeImagePlanar::getImpactAngleImageBasedOnLocalNormals extract a local normal (with a heuristic not to include background points) and calculate the impact angle based on this for every point in the image."),
                            gen.const("sp_IntegralImageNormalEstimationAndShadowPoints",   int_t, 2, "pcl::IntegralImageNormalEstimation + pcl::ShadowPoints") ],
                            "Surface normal based filtering method enum")

gen.add("max_range", double_t, 0, "Removes points with depth values higher than this threshold", 2.0, 0.001, 99999.0)
gen.add("normal_based_filtering_method", int_t, 0, "Surface normal based filtering method", 2, 0, 2, edit_method=normal_f_enum)

#_______________________________________________________________________________________________
# ImpactAngleImageBasedOnLocalNormals parameters
#_______________________________________________________________________________________________
gen.add("rip_radius", int_t, 0, "Search radius", 4, 1, 20)
gen.add("rip_threshold", double_t, 0, "Pixels with surface angles w.r.t. the camera higher than this will be removed", 0.15, 0.0, 1.5707)

#_______________________________________________________________________________________________
# IntegralImageNormalEstimationAndShadowPoints parameters
#_______________________________________________________________________________________________
sp_method_enum = gen.enum([ gen.const("COVARIANCE_MATRIX",    int_t, 0, "creates 9 integral images to compute the normal for a specific point from the covariance matrix of its local neighborhood."),
                            gen.const("AVERAGE_3D_GRADIENT",  int_t, 1, "creates 6 integral images to compute smoothed versions of horizontal and vertical 3D gradients and computes the normals using the cross-product between these two gradients."),
                            gen.const("AVERAGE_DEPTH_CHANGE", int_t, 2, "creates only a single integral image and computes the normals from the average depth changes."),
                            gen.const("SIMPLE_3D_GRADIENT",   int_t, 3, "simple method without using integral image.") ],
                            "Normal estimation method enum")

gen.add("sp_normal_estimation_method",        int_t, 0,       "Search radius", 3, 0, 3, edit_method=sp_method_enum)
gen.add("sp_normal_smoothing_size",           double_t, 0,    "Factor which influences the size of the area used to smooth normals (depth dependent if sp_use_depth_dependent_smoothing is true)", 10.0, 0.001, 50.0)
gen.add("sp_max_depth_change_factor",         double_t, 0,    "The depth change threshold for computing object borders based on depth changes", 0.01, 0.001, 1.0)
gen.add("sp_use_depth_dependent_smoothing",   bool_t, 0,      "Set whether to use depth depending smoothing or not.", False)
gen.add("sp_threshold",                       double_t, 0,    "The threshold for shadow points rejection.", 0.15, 0.0, 1.5707)

#_______________________________________________________________________________________________
# Global parameters
#_______________________________________________________________________________________________

stats_f_enum = gen.enum([   gen.const("DisabledStatisticalFiltering",   int_t, 0, "Disabled"),
                            gen.const("sor_StatisticalOutlierRemoval",  int_t, 1, "StatisticalOutlierRemoval uses point neighborhood statistics to filter outlier data.") ],
                            "Statistical filtering method enum")

gen.add("statistical_filtering_method", int_t, 0, "Statistical Outlier filtering method", 1, 0, 1, edit_method=stats_f_enum)

#_______________________________________________________________________________________________
# StatisticalOutlierRemoval parameters
#_______________________________________________________________________________________________
gen.add("sor_mean_k",             int_t, 0,      "The number of points to use for mean distance estimation.", 10, 3, 100)
gen.add("sor_stddevmulthresh",    double_t, 0,   "The standard deviation multiplier threshold as set by the user.", 0.01, 0.00001, 10.0)



exit(gen.generate(PACKAGE, "depth_image_veiling_effect_filter", "DepthImageVeilingEffectFilter"))